generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  bio            String?
  birthdate      DateTime?
  profilePic     String?
  skillLevel     String?
  socialMedia    Json?
  adventureTypes Json?
  attitude       Json?
  languages      Json?
  isAdmin        Boolean      @default(false)
  city           String?
  latitude       Float?
  longitude      Float?
  state          String?
  gender         String?
  accounts       Account[]
  photos         Photo[]
  travelPreferences Json?
  preferences    Preferences?
  sessions       Session[]
  messages       Message[]
}

model Preferences {
  id       String  @id @default(cuid())
  userId   String  @unique
  gender   String?
  ageStart Int?
  ageEnd   Int?
  distance Int?
  user     User    @relation(fields: [userId], references: [id])
}


model Match {
  id          String   @id @default(cuid())
  userOneId   String
  userOneName String
  userTwoId   String
  userTwoName String
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String 
  url       String?
  sentAt    DateTime @default(now())
  senderId  String
  matchId   String
  user      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
}
model Photo {
  id      String  @id @default(cuid())
  url     String  @unique
  caption String?
  userId  String
  user    User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
